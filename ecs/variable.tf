#### Launch Config  ####

variable "launch_config_name" {
  type        = string
  description = "The name of the launch configuration. If you leave this blank, Terraform will auto-generate a unique name."
}

variable "image_id" {
  type        = string
  description = "The EC2 image ID to launch"
}

variable "instance_type" {
  type        = string
  description = "The size of instance to launch"
}

variable "iam_instance_profile" {
  description = "The name attribute of the IAM instance profile to associate with launched instances"
  type        = string
}



variable "user_data" {
  type        = string
  description = "The user data to provide when launching the instance. Provide the executable file name with extension. Do not pass gzip-compressed data via this argument."
}

variable "enable_monitoring" {
  type        = string
  description = "Enables/disables detailed monitoring. This is enabled by default."
  default     = "true"
}

variable "root_block_device" {
  description = "Customize details about the root block device of the instance"
  type        = list
  default     = []
}

variable "ebs_block_device" {
  description = "Additional EBS block devices to attach to the instance"
  type        = list
  default     = []
}

variable "spot_price" {
  description = "The price to use for reserving spot instances"
  type        = string
  default     = ""
}

variable "placement_tenancy" {
  description = "The tenancy of the instance. Valid values are 'default' or 'dedicated'"
  type        = string
  default     = "default"
}

variable "ebs_optimized" {
  description = "If true, the launched EC2 instance will be EBS-optimized"
  type        = string
  default     = "false"
}

variable "tags" {
  type        = map(string)
  description = "Additional tags (e.g. `map(`BusinessUnit`,`XYZ`)"
  default     = {}
}

variable "launch_type" {
  type        = string
  description = "Choose either FARGATE or EC2"
}

variable "desired_count" {
  type        = string
  description = "Number of ECS service capacity desired"
}

variable "ecs_cluster" {
  description = "ECS cluster name"
  type        = string
}

variable "ecs_key_pair_name" {
  description = "EC2 instance key pair name"
  type        = string
}

variable "max_size" {
  description = "Maximum number of instances in the cluster"
  type        = string
}

variable "min_size" {
  description = "Minimum number of instances in the cluster"
  type        = string
}

variable "desired_capacity" {
  description = "Desired number of instances in the cluster"
  type        = string
}

variable "service_name" {
  description = "The name of the service (up to 255 letters, numbers, hyphens, and underscores)"
  type        = string
}

variable "asg_name" {
  description = "The name of the auto scaling group. By default generated by Terraform"
  type        = string
}

variable "health_check_type" {
  type        = string
  description = "Autoscaling group health type ELB or EC2"
}

variable "default_cooldown" {
  description = "The amount of time, in seconds, after a scaling activity completes before another scaling activity can start. Default is 300"
  type        = string
  default     = "300"
}

variable "health_check_grace_period" {
  description = "Time (in seconds) after instance comes into service before checking health. Default is 300."
  type        = string
  default     = "300"
}

variable "force_delete" {
  description = "Allows deleting the autoscaling group without waiting for all instances in the pool to terminate. You can force an autoscaling group to delete even if it's in the process of scaling a resource. Normally, Terraform drains all the instances before deleting the group. This bypasses that behavior and potentially leaves resources dangling. Default is false."
  type        = string
  default     = "false"
}

variable "termination_policies" {
  description = "A list of policies to decide how the instances in the auto scale group should be terminated. The allowed values are OldestInstance, NewestInstance, OldestLaunchConfiguration, ClosestToNextInstanceHour, Default. Default is set to Default."
  type        = list(string)
  default     = ["Default"]
}

variable "suspended_processes" {
  description = "A list of processes to suspend for the AutoScaling Group. The allowed values are Launch, Terminate, HealthCheck, ReplaceUnhealthy, AZRebalance, AlarmNotification, ScheduledActions, AddToLoadBalancer. Note that if you suspend either the Launch or Terminate process types, it can prevent your autoscaling group from functioning properly. Default is blank."
  type        = list(string)
  default     = []
}

variable "placement_group" {
  description = "The name of the placement group into which you'll launch your instances, if any"
  type        = string
  default     = ""
}

variable "enabled_metrics" {
  description = "A list of metrics to collect. The allowed values are GroupMinSize, GroupMaxSize, GroupDesiredCapacity, GroupInServiceInstances, GroupPendingInstances, GroupStandbyInstances, GroupTerminatingInstances, GroupTotalInstances. All these values are set by default."
  type        = list(string)
  default = [
    "GroupMinSize",
    "GroupMaxSize",
    "GroupDesiredCapacity",
    "GroupInServiceInstances",
    "GroupPendingInstances",
    "GroupStandbyInstances",
    "GroupTerminatingInstances",
    "GroupTotalInstances",
  ]
}

variable "metrics_granularity" {
  description = "The granularity to associate with the metrics to collect. The only valid value is 1Minute"
  type        = string
  default     = "1Minute"
}

variable "wait_for_capacity_timeout" {
  description = "A maximum duration that Terraform should wait for ASG instances to be healthy before timing out. (See also Waiting for Capacity below.) Setting this to '0' causes Terraform to skip all Capacity Waiting behavior. Default is set to 10m."
  type        = string
  default     = "10m"
}

variable "min_elb_capacity" {
  description = "Setting this causes Terraform to wait for this number of instances to show up healthy in the ELB only on creation. Updates will not wait on ELB instance number changes"
  type        = string
  default     = "0"
}

variable "protect_from_scale_in" {
  description = "Allows setting instance protection. The autoscaling group will not select instances with this setting for termination during scale in events. Default is false."
  type        = string
  default     = "false"
}

variable "service_linked_role_arn" {
  description = "The ARN of the service-linked role that the ASG will use to call other AWS services."
  type        = string
  default     = ""
}

variable "task_name" {
  type        = string
  description = "A unique name for your task definition."
}

variable "deployment_controller_type" {
  description = "Type of deployment controller. Valid values: `CODE_DEPLOY`, `ECS`."
  type        = string
}

variable "deployment_maximum_percent" {
  type        = string
  description = "The upper limit of the number of tasks (as a percentage of `desired_count`) that can be running in a service during a deployment"
}

variable "deployment_minimum_healthy_percent" {
  type        = string
  description = "The lower limit (as a percentage of `desired_count`) of the number of tasks that must remain running and healthy in a service during a deployment"
}

variable "task_role_arn" {
  type        = string
  description = "The ARN of IAM role that allows your Amazon ECS container task to make calls to other AWS services."
}

variable "execution_role_arn" {
  type        = string
  description = "The Amazon Resource Name (ARN) of the task execution role that the Amazon ECS container agent and the Docker daemon can assume."
}

variable "network_mode" {
  type        = string
  description = "The Docker networking mode to use for the containers in the task."
}

variable "ecs_service_iam_role" {
  type        = string
  description = "ARN of the IAM role that allows Amazon ECS to make calls to your load balancer."
}

variable "scheduling_strategy" {
  type        = string
  description = "The scheduling strategy to use for the service."
}

variable "fargate_cpu" {
  type        = string
  description = "The number of cpu units used by the task. If the requires_compatibilities is FARGATE this field is required."
}

variable "fargate_memory" {
  type        = string
  description = "The amount (in MiB) of memory used by the task. If the requires_compatibilities is FARGATE this field is required."
}

variable "container_name" {
  type        = string
  description = "The name of the container to associate with the load balancer (as it appears in a container definition)."
}

variable "container_port" {
  type        = string
  description = "The port on the container to associate with the load balancer."
}

variable "subnet_ids" {
  type        = list(string)
  description = "A list of subnet IDs to attach to the LB. Subnets cannot be updated for Load Balancers of type network. Changing this value for load balancers of type network will force a recreation of the resource."
}

variable "security_group_ids" {
  type        = list(string)
  description = "A list of security group IDs to assign to the LB. Only valid for Load Balancers of type application."
}

variable "container_definitions" {
  description = "A list of valid container definitions provided as a single valid JSON document."
  type        = string
}

variable "target_group_arn" {
  type        = string
  description = "The ARN of the Load Balancer target group to associate with the service."
  default     = ""
}

/*
  Mandatory tags variables
*/

variable "environment" {
  type        = string
  description = "DBx,SIT,PERF,PRODX,UAT,UTILx"
  /*SIT (Multiple environments are possible, ie SIT1, SIT2, etc)
    UAT (Multiple environments are possible, ie UAT1, UAT2, etc)
    PERF
    PRODX (ie PRODB/PROD1 - Prod Blue or PRODG/PROD2 - Prod Green, etc)
    DR*/
}

variable "company" {
  type        = string
  description = "Company that owns resource"
}

variable "costcenter" {
  type        = string
  description = "The project cost center."
}

variable "owner-department" {
  type        = string
  description = "The name of department owner."
}

variable "it-department" {
  type        = string
  description = "The name of IT department"
}

variable "barometer-it-num" {
  type        = string
  description = "The barometer it number."
}

variable "resource-type" {
  type        = string
  description = "Type of resource."
  /*SVR – server resource
ELB – load balancer resource
CON – container resource
GLD – golden image resource
GRP – group resource
IAM – identity access management resource
POL – policy resource
VOL – storage resource
XXX – other resource typesSVR, ELB, CON, GLD, GRP, IAM, POL, VOL, XXX"*/
}

variable "layer" {
  type        = string
  description = "WEBx, MWx, DBx, UTILx"
  /*WEBx
  MWx (ie middleware such as MW1 – MQ caching, MW2 – Liberty/Java, etc)
  DBx
  UTILx (ie system management, monitoring and security tools, etc)*/
}

variable "compliance" {
  type        = string
  description = "PHI, PCI, PII, SOX, None"
}

variable "application" {
  type        = string
  description = "Based upon application nomenclature in server naming convention policy.Use up to six (6) characters to name your application."
}

variable "application_dl" {
  type        = string
  description = "Application DL"
}
